{"version":3,"sources":["components/ContentStatus.js","components/TextContentEditor.js","components/LevelSelector.js","components/Diagram.js","components/Sidebar.js","utils.js","components/App.js","serviceWorker.js","index.js"],"names":["messages","success","error","type","className","message","showIcon","updateState","setUpdatingState","status","useState","text","setText","cursorPosition","setCursorPosition","textareaRef","createRef","useEffect","timerId","setTimeout","clearTimeout","current","setSelectionRange","value","onChange","e","target","onKeyUp","keyCode","selectionStart","end","prevLine","slice","lastIndexOf","replace","headSpaces","match","increaseDepth","parentOffset","length","offset","computedSelectionPosition","concat","repeat","ref","ContentStatus","levels","getSuitableLevelKey","context","level","key","Object","prototype","hasOwnProperty","call","rootLevel","createDataMap","data","path","entries","reduce","acc","element","name","nextLevel","currentPath","push","join","title","children","memo","parsedYaml","selectLevel","treeData","dropdownStyle","maxHeight","overflow","placeholder","treeDefaultExpandAll","selectedLevel","onUpdateError","diagram","useRef","createDiagramVisualizerInstance","DiagramVisualizer","containerId","onClick","selectionId","hasChild","selectedPath","split","finalSelectedPath","update","id","Sidebar","updatingContent","antIcon","style","fontSize","spin","Sider","width","paddingTop","indicator","rules","pattern","handler","input","this","exec","App","setData","parsingStatus","setParsingStatus","setSelectedLevel","setUpdatingContent","Content","span","TextContentEditor","parseYaml","then","c4InputValidator","processedData","catch","console","antdMessage","rule","find","r","test","messageBuilder","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5addf09b.chunk.js","sourcesContent":["import React from 'react';\nimport { Alert } from 'antd';\n\nconst messages = {\n  success: 'Valid input',\n  error: 'Syntax error',\n};\n\nexport default ({ type }) => (type\n    && (\n    <Alert\n      className=\"content-status-alert\"\n      type={type}\n      message={messages[type]}\n      showIcon\n    />\n    )\n);\n","import React, { useState, useEffect, createRef } from 'react';\nimport ContentStatus from './ContentStatus';\n\nconst DELAY = process.env.NODE_ENV !== 'PRODUCTION' ? 0 : 3000;\nconst ENTER_KEY_CODE = 13;\nconst INDENT_SIZE = 2;\nconst DEPTH_INDICATOR = ':';\n\nexport default ({\n  updateState,\n  setUpdatingState,\n  status,\n}) => {\n  const [text, setText] = useState();\n  const [cursorPosition, setCursorPosition] = useState(null);\n  const onChangeHandler = (e) => {\n    const { value } = e.target;\n\n    setText(value);\n    setUpdatingState(true);\n  };\n  const textareaRef = createRef();\n  const onKeyUp = (e) => {\n    const { keyCode, target } = e;\n    if (keyCode === ENTER_KEY_CODE) {\n      setText((value) => {\n        const { selectionStart } = target;\n        const end = selectionStart - 1;\n        const prevLine = value\n          .slice(value.lastIndexOf('\\n', end - 1), end)\n          .replace(/\\n/g, '');\n        const headSpaces = prevLine.match(/^\\s+/);\n        const increaseDepth = (prevLine || DEPTH_INDICATOR).slice(-1) === DEPTH_INDICATOR;\n        const parentOffset = (headSpaces || [''])[0].length;\n        const offset = increaseDepth ? parentOffset + INDENT_SIZE : parentOffset;\n        const computedSelectionPosition = selectionStart + offset;\n\n        setCursorPosition([computedSelectionPosition, computedSelectionPosition]);\n\n        return value\n          .slice(0, selectionStart)\n          .concat(' '.repeat(offset))\n          .concat(value.slice(selectionStart));\n      });\n    }\n  };\n\n  useEffect(() => {\n    const timerId = setTimeout(() => (text ? updateState(text) : null), DELAY);\n\n    return () => clearTimeout(timerId);\n    // eslint-disable-next-line\n  }, [text]); \n\n  useEffect(() => {\n    if (cursorPosition) {\n      textareaRef.current.setSelectionRange(...cursorPosition);\n      setCursorPosition(null);\n    }\n  }, [cursorPosition, textareaRef]);\n\n  return (\n    <>\n      <textarea\n        value={text}\n        className=\"text-content-editor\"\n        onChange={onChangeHandler}\n        onKeyUp={onKeyUp}\n        ref={textareaRef}\n      />\n      <ContentStatus type={status} />\n    </>\n  );\n};\n","import React, { memo } from 'react';\nimport { TreeSelect } from 'antd';\n\nexport const levels = ['context', 'container', 'component', 'class'];\nexport const getSuitableLevelKey = (context = {}, level = 0) => {\n  const key = levels[level];\n\n  return Object.prototype.hasOwnProperty.call(context, key) && key;\n};\nexport const rootLevel = levels[0];\n\nexport const createDataMap = (data = {}, level = 0, path = []) => (\n  Object.entries(data[levels[level]] || {})\n    .reduce((acc, [key, element]) => {\n      const { name } = element;\n      const nextLevel = level + 1;\n      const currentPath = path.concat(key);\n\n      if (getSuitableLevelKey(element, nextLevel)) {\n        acc.push({\n          key,\n          value: currentPath.join(':'),\n          title: `${name} - ${levels[nextLevel]}`,\n          children: createDataMap(element, nextLevel, currentPath),\n        });\n      }\n\n      return acc;\n    }, [])\n);\nexport const computeLevelsList = (data, key) => {\n  const title = 'Context';\n\n  return (rootLevel in data) ? [\n    {\n      title,\n      key,\n      value: key,\n      children: createDataMap(data, 0, [key]),\n    },\n  ] : [];\n};\n\nconst LevelSelector = ({\n  parsedYaml,\n  selectLevel,\n  value,\n}) => {\n  const treeData = computeLevelsList(parsedYaml, rootLevel);\n\n  return (\n    <TreeSelect\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      treeData={treeData}\n      placeholder=\"Select level\"\n      onChange={selectLevel}\n      className=\"context-selection\"\n      treeDefaultExpandAll\n    />\n  );\n};\n\nexport default memo(LevelSelector);\n","import React, { useEffect, useRef, memo } from 'react';\nimport DiagramVisualizer from 'c4-model-visualizer-core/diagram';\nimport { getSuitableLevelKey, levels } from './LevelSelector';\n\nconst Diagram = ({ selectLevel, data, selectedLevel, onUpdateError }) => {\n  const containerId = 'cy';\n  const diagram = useRef(null);\n  const createDiagramVisualizerInstance = () =>\n    new DiagramVisualizer(levels, getSuitableLevelKey, {\n      containerId,\n      onClick: (e) => {\n        const { selectionId, hasChild } = e.target.data();\n\n        if (hasChild) {\n          selectLevel(selectionId);\n        }\n      },\n    });\n\n  useEffect(() => {\n    diagram.current = createDiagramVisualizerInstance();\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    const { context } = data;\n\n    if (!selectedLevel) return;\n\n    const selectedPath = (selectedLevel || '').split(':');\n    const finalSelectedPath = selectedPath[selectedPath.length - 1];\n\n    try {\n      diagram.current.update(context, selectedPath, finalSelectedPath);\n    } catch (e) {\n      onUpdateError(e);\n      diagram.current = createDiagramVisualizerInstance();\n    }\n    // eslint-disable-next-line\n  }, [diagram, data, selectedLevel]);\n\n  return <div id={containerId} />;\n};\n\nexport default memo(Diagram);\n","import React from 'react';\nimport { Spin, Icon, Layout } from 'antd';\n\nexport default function Sidebar({ updatingContent }) {\n  const antIcon = <Icon type=\"loading\" style={{ fontSize: 24 }} spin />;\n\n  return (\n    <Layout.Sider width=\"70\">\n      {updatingContent && <Spin style={{ width: '100%', paddingTop: 10 }} indicator={antIcon} />}\n    </Layout.Sider>\n  );\n}\n","/* eslint-disable import/prefer-default-export */\nconst rules = [\n  {\n    pattern: /Can not create edge `\\w+` with nonexistant target `(\\w+)`/,\n    handler(input) {\n      return `\"${this.pattern.exec(input)[1]}\" identifier does not exist`;\n    },\n  },\n];\n\nexport const messageBuilder = (input) => {\n  const rule = rules.find((r) => r.pattern.test(input));\n\n  if (!rule) {\n    return 'Unknown error';\n  }\n\n  return rule.handler(input);\n};\n","import React, { useState } from 'react';\nimport { Layout, Row, Col, message as antdMessage } from 'antd';\nimport c4InputValidator from 'c4-model-visualizer-core/utils/c4-input-validator';\nimport { parseAsync as parseYaml } from 'c4-model-visualizer-core/utils/yaml-parser';\nimport TextContentEditor from './TextContentEditor';\nimport Diagram from './Diagram';\nimport LevelSelector, { rootLevel } from './LevelSelector';\nimport Sidebar from './Sidebar';\nimport { messageBuilder } from '../utils';\n\nconst App = () => {\n  const [data, setData] = useState({});\n  const [parsingStatus, setParsingStatus] = useState(null);\n  const [selectedLevel, setSelectedLevel] = useState(null);\n  const [updatingContent, setUpdatingContent] = useState(false);\n\n  const updateData = (input) =>\n    parseYaml(input)\n      .then(c4InputValidator)\n      .then((processedData) => {\n        setData(processedData);\n        setParsingStatus('success');\n        setSelectedLevel(selectedLevel || rootLevel);\n        setUpdatingContent(false);\n      })\n      .catch(() => {\n        setData({});\n        setParsingStatus('error');\n        setSelectedLevel(null);\n        setUpdatingContent(false);\n      });\n  const onUpdateError = (e) => {\n    console.error(e);\n    antdMessage.error(messageBuilder(e.message));\n  };\n\n  return (\n    <Layout className=\"app-layout\">\n      <Sidebar updatingContent={updatingContent} />\n      <Layout.Content>\n        <Row type=\"flex\">\n          <Col span={8} className=\"sidebar\">\n            <TextContentEditor\n              updateState={updateData}\n              status={parsingStatus}\n              setUpdatingState={setUpdatingContent}\n            />\n          </Col>\n          <Col span={16}>\n            <LevelSelector\n              parsedYaml={data}\n              selectLevel={setSelectedLevel}\n              value={selectedLevel}\n            />\n            <Diagram\n              data={data}\n              selectLevel={setSelectedLevel}\n              selectedLevel={selectedLevel}\n              onUpdateError={onUpdateError}\n            />\n          </Col>\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}